Для подключения библиотеки https://immutables.github.io/
к проекту нужно добавить эту библиотеку в качестве зависимости
в build.gradle файл.

dependencies {

	compileOnly("org.immutables:value:2.9.2")

}

Это не совсем простая библиотека. Она используется не во время
работы приложения (runtime), а во время компиляции. Почему так?

Давайте вкратце рассмотрим суть того, что же делает библиотека Immutables.

Эта библиотека генерит код на основе аннотаций. То есть программист
добавляет аннотации в код приложения, а библиотека на основе них
генерит новый код. Magic какой то! :)

Основную задачу, которую решает библиотека Immutables,
заключается в упрощении процесса создания не изменяемых объектов.
Говоря простым языком: повесил пару аннотаций и все, получай не
изменяемый объект.


Аннотации в Java — это метки, которые вешаются на класс,
метод, переменную, параметр и другие элементы кода.
Они предоставляют дополнительную информацию об этом коде,
которую можно использовать в процессе компиляции (compile time)
или во время выполнения (runtime).

Аннотации могут быть использованы для самых разных целей:

1. **Информирование компилятора**: Для предоставления информации
компилятору о предполагаемом поведении кода. Например, `@Override`
указывает компилятору, что метод предназначен для переопределения
метода из родительского класса.

2. **Построение кода во время компиляции**: С помощью аннотаций
и инструментов, таких как Lombok, можно автоматически генерировать код
во время компиляции.

3. **Информация для фреймворков**: Многие фреймворки (например,
Spring, Hibernate) используют аннотации для настройки их поведения.
В этом случае информация об аннотациях используется во время
работы приложения (runtime).

4. **Работа с рефлексией во время выполнения**: Можно использовать
аннотации и API рефлексии Java, чтобы анализировать код во время выполнения.

Примеры аннотаций в Java:

- `@Override`: Указывает, что дочерний метод должен переопределять
метод родительского класса.

- `@Deprecated`: Отмечает программный элемент как устаревший.

- `@SuppressWarnings`: Инструктирует компилятор игнорировать
определенные предупреждения.

- `@Entity`: Используется в JPA для обозначения класса как
сущности в базе данных.

- `@Autowired`: Используется в Spring для автоматического связывания.

Вы также можете создавать свои собственные аннотации в Java
если это необходимо. Создание и использование своих собственных
аннотаций может быть полезным для улучшения читаемости кода,
автоматической генерации кода или для обеспечения
дополнительной функциональности.


Так как аннотации библиотеки Immutables используются для генерации
кода во время компиляции в build.gradle нужно добавить следующий
зависимости:

dependencies {
	compileOnly("org.immutables:value:2.9.2")
	annotationProcessor("org.immutables:value:2.9.2")
}

Annotation Processor - это инструмент, который используется при
компиляции кода для обработки аннотаций. Его так же нужно будет
активизировать в настройках IDEA (Project -> Settings ->
в строке поиска ввести "Annotation processor" и поставить
галочку "Enable annotation processing").

Ваше задание: изучите дополнительную информацию про аннотации
в Java. На практике создайте аннотации compile time и runtime,
а так же аннотации которые можно вешать на классы, методы,
свойства, параметры. Узнайте больше информации про процессор
аннотаций.

PS: умение самостоятельно изучить новую для вас тему просто
необходимый навык! Если в процессе изучения появятся вопросы
на которые вы не можете найти ответы - задавайте их вашему ментору!