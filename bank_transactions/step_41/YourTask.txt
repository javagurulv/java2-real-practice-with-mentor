В классе FoodExpensesCalculator вы можете найти нашу версию
расчёта суммы расходов на еду. Сравните ваш код с нашим.

Так как перед выполнением отбора (фильтрации) массива со всеми
транзакциями банковского аккаунта мы не знаем сколько из них
окажется WITHDRAWAL транзакциями, поэтому для сохранения отобранных
транзакций была выбрана структура данных список.

Список можно создать не указывая его длины, а потом положить в него
сколько угодно объектов. Для процесса отбора (фильтрации) это очень удобно.

Для обхода массива и списков при решении данной задачи удобно воспользоваться
циклом foreach, так как нас не интересует порядок в котором мы проходим по списку или
массиву. В данном случае нас интересует просто применение для каждого элемента
списка или массива определённой операции.

Пришло время протестировать наш алгоритм.
Создайте класс FoodExpensesCalculatorTest и напишите автоматические
тесты для метода calculateExpensesAmount().