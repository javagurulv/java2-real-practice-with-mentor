Сгенерируй 1 миллион (или более) транзакций из проекта Fraud Detector.

Попробуй проанализировать их последовательно и замерь время выполнения.

Создай программный код для анализа транзакций, который использует
многопоточность. Запусти своё решение и замерь время выполнения.
Решение построй на использовании пула потоков.


Далее приведен пример использования пула потока.

In Java, you can use the `ExecutorService` framework to
execute tasks in a thread pool and get notified when a task
is finished. Here's a step-by-step guide on how to do this:

1. Import the necessary packages:

```java
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
```

2. Create an `ExecutorService` with a thread pool. You can
choose the number of threads in the pool based on your application's
requirements.

```java
ExecutorService executorService = Executors.newFixedThreadPool(4); // Creates a thread pool with 4 threads
```

3. Define your task as a `Runnable` or `Callable`. A `Runnable`
represents a task without a return value, while a `Callable` can
return a result.

```java
Runnable task = () -> {
    // Your task code goes here
    System.out.println("Task executed by thread: " + Thread.currentThread().getName());
};

// If you need a result from the task, use Callable instead:
// Callable<Integer> task = () -> { /* your task code */ return result; };
```

4. Submit the task to the `ExecutorService`. This will start
the task execution asynchronously, and you can get a `Future`
object that allows you to track the task's progress and retrieve
its result (if it's a `Callable`).

```java
Future<?> future = executorService.submit(task);

// If you're using Callable, you can retrieve the result using:
// Future<Integer> future = executorService.submit(task);
```

5. You can wait for the task to complete using the `get()`
method on the `Future` object. This will block until the task
is finished.

```java
try {
    future.get(); // Waits for the task to complete
} catch (Exception e) {
    // Handle exceptions that may occur during task execution
} finally {
    // Remember to shut down the executor service when you're done with it.
    executorService.shutdown();
}
```

By using the `Future` object, you can also check the
task's status, cancel it if needed, and get the result
if it's a `Callable`. This allows you to perform various
operations while keeping track of the task's progress and completion.

Remember to handle exceptions that may occur during
task execution appropriately, as shown in the try-catch block in step 5.
